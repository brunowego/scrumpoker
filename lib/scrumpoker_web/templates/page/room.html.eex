<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" xmlns:v-on="http://www.w3.org/1999/xhtml"></script>
<script>window.channelRoomId = "<%= @room %>"</script>
<script>window.user_id = "<%= @user_id %>"</script>

<div id="app" class="text-gray-900">
   <div class="mx-auto max-w-8xl bg-secondary text-on-secondary border shadow rounded p-5">
       <div class="grid grid-cols-2">
       <div>
        <div class="row lg:text-3xl text-accent-secondary font-semibold slide-in-bottom-h1 uppercase">
           <h1>#<%= @room %></h1>
        </div>
        <div style="min-height: 300px;">
           <div class="text-on-secondary p-2">
           
              <div v-if="isShowingConnectionError" class="mt-3 mb-5">
               <span class="mb-6 font-semibold">Connection problems, please wait...</span>
              </div>
           
              <div v-if="sortedUsers.length < 2" class="mt-3 mb-5">
               <span class="mb-6 font-semibold">Seems like you are here all by yourself, send this link to your team-mates:</span>
               <input onClick="this.setSelectionRange(0, this.value.length)" class="self-strech shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   value="http://poker.marcin.uk/<%= @room %>" readonly>
              </div>
              
              <ul id="votes" class="list-disc text-xl pl-2" >
                 <li v-for="user in sortedUsers">
                    <span>{{ user.name }} {{ user.time | isOnline }}</span>
                    <span v-if="user.isOffline" title="User is no longer connected"> (Offline)</span>
                    <span v-if="user.count > 1" title="Users connected under this name" class="text-brand"> ({{ user.count }} connected)</span>
                    <span v-if="user.isObserver" title="User is not voting"> is watching</span>
                    <span v-if="user.vote && isShowingVotes && user.isObserver == false" class="fade-in-quick" >voted</span>
                    <i v-if="user.vote && isShowingVotes == false && user.isObserver == false" class="ml-1 fas fa-check-square fade-in-quick"></i>
                    <div class="inline-block w-4" v-if="user.vote == null && isShowingVotes == false && user.isObserver == false">
                        <span class="loading"></span>
                    </div>
                    <span v-if="user.vote == null && isShowingVotes && user.isObserver == false" >didn't vote</span>
                    <span v-if="isShowingVotes && user.isObserver == false" class="font-bold fade-in-quick" style="font-weight: bold;" > {{ user.vote }}</span>
                 </li>
              </ul>
           </div>
       </div>
        </div>
           <div class="column p-2">
              <label for="message-input" class="text-accent-secondary font-semibold p-1 slide-in-bottom-subtitle font-bold">Case/Story</label>
              <textarea id="message-input"
                 class="text-foreground bg-background border min-h-full shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline slide-in-bottom border-2 "
                 @input="onInputChangedDebounce($event.target.value)" v-model="message" ></textarea>
           </div>
       </div>
       <div class="mt-5 flex">
           <span :style="{visibility: myVote == null ? 'visible' : 'hidden'}" class="font-semibold text-accent-secondary">Please select your card</span>
           
          <div class="md:flex md:items-center my-2 ml-auto">
          <select v-model="deck" class="m-2 text-accent p-1" @change="changeDeck($event.target.selectedIndex)">
            <option v-for="(item, key) in decks" :value="item.cards">
                  {{item.name}}
                </option>          
            </select>
          
             <div class=""></div>
             <label class="block text-brand font-bold">
               <input class="mr-2 leading-tight font-semibold" type="checkbox" v-on:input="setObserver($event.target.checked)">
               <span class="text-sm" title="Just observe, don't participate in voting">
                 Just watching, don't vote
               </span>
             </label>
          </div>
          <%= # <a href="https://en.wikipedia.org/wiki/Planning_poker" class="underline ml-auto" target="_blank">How to play?</a> <br/> %>
       </div>
      <div class="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12 pt-3">
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[0])}" v-on:click="vote(cards[0])" :disabled="canVote === false" :inner-html.prop="cards[0] | toCard" ></button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[1])}" v-on:click="vote(cards[1])" :disabled="canVote === false" :inner-html.prop="cards[1] | toCard" ></button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[2])}" v-on:click="vote(cards[2])" :disabled="canVote === false" :inner-html.prop="cards[2] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[3])}" v-on:click="vote(cards[3])" :disabled="canVote === false" :inner-html.prop="cards[3] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[4])}" v-on:click="vote(cards[4])" :disabled="canVote === false" :inner-html.prop="cards[4] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[5])}" v-on:click="vote(cards[5])" :disabled="canVote === false" :inner-html.prop="cards[5] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[6])}" v-on:click="vote(cards[6])" :disabled="canVote === false" :inner-html.prop="cards[6] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[7])}" v-on:click="vote(cards[7])" :disabled="canVote === false" :inner-html.prop="cards[7] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[8])}" v-on:click="vote(cards[8])" :disabled="canVote === false" :inner-html.prop="cards[8] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[9])}" v-on:click="vote(cards[9])" :disabled="canVote === false" :inner-html.prop="cards[9] | toCard" > </button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32 text-4xl" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[10])}" v-on:click="vote(cards[10])" :disabled="canVote === false" :inner-html.prop="cards[10] | toCard" ></button>
         <button class="cardButtonBig p-2 m-2 h-20 md:h-32 lg:h-32" v-bind:class="{'cardButtonBigSelected slide-top': (myVote == cards[11])}" v-on:click="vote(cards[11])" :disabled="canVote === false" :inner-html.prop="cards[11] | toCard" ></button>
      </div>
      <div class="grid grid-cols-2">
         <button class="myButton m-2 bg-indigo-500 text-white" type="button" v-on:click="showVotes()" :disabled="isShowingVotes"> Show votes </button>
         <button class="myButton m-2 bg-indigo-500 text-white" type="button" :disabled="isShowingVotes == false" v-on:click="clearVotes()"> Next case/story </button>
      </div>
      <div class="row" v-if="canVote && isShowingVotes && votes[userName] === undefined">
         <h3 style="color: #dd3235">You didn't vote!</h3>
      </div>
      <div class="flex mb-4 mt-5">
         <div class="h-10 p-2"><span class="my-auto font-bold align-middle text-align-top">Invitation:</span></div>
            <input onClick="this.setSelectionRange(0, this.value.length)" class="self-strech shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
               value="http://poker.marcin.uk/<%= @room %>" readonly>
      </div>
   </div>
</div>
<script type="text/javascript" src="<%= Routes.static_path(@conn, "/js/scrum.js") %>"></script>

